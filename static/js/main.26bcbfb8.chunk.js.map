{"version":3,"sources":["pokechart.js","serviceWorker.js","index.js"],"names":["Cooking","props","convertCSVtoArray","str","PokeNum","Promise","resolve","result","copyName","state","Name","slice","copyAttack","Attack","copyDefence","Defense","copyHP","HP","copySpAtk","SpAtk","copySpDef","SpDef","copySpeed","Speed","copyParam","BaseParam","document","getElementById","value","i","length","console","log","Number","setState","getCSV","point","reqq","XMLHttpRequest","open","send","onload","Papa","parse","responseText","header","delimiter","complete","buf","data","then","SettingParam","SetDoryokuchi","e","copy","doryokuchi","checkMax","target","id","match","substr","SetKotaichi","kotaichi","reject","Param","a","CalcParam","catch","error","IdName","Num","DoryokuID","KotaiID","doryokuPoint","KotaiPoint","copySt","Poke1St","Radar","dataRadar","rank","poke1","poke2","height","width","cx","cy","dataKey","name","stroke","fill","fillOpacity","Set_DoryokuchiBox","doryokuchiID","Plus","Minus","menulabel","className","type","onClick","min","max","onChange","Input_Doryokuchi","input","PlusArray","MinusArray","Set_KotaichiBox","Kotaichi","KotaichiID","step","Input_Kotaichi","location","hitflg","hitpoint","csvfile","undefined","maxLength","this","React","Component","Boolean","window","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.26bcbfb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./pokechart.css\";\r\nimport Papa from 'papaparse';\r\nimport {\r\n    RadarChart, Tooltip, PolarGrid, PolarAngleAxis, Radar\r\n  } from 'recharts';\r\n\r\n\r\nexport default class Cooking extends React.Component  {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            location:0,\r\n            hitflg:true,\r\n            hitpoint:30,\r\n            Name:[\"\",\"\"],\r\n            Attack:[0, 0],\r\n            Defense:[0, 0],\r\n            HP:[0, 0],\r\n            SpAtk:[0, 0],\r\n            SpDef:[0, 0],\r\n            Speed:[0, 0],\r\n            Poke1St:[0,0,0,0,0,0],\r\n            BaseParam:[0,0,0,0,0,0],\r\n            doryokuchi:[0,0,0,0,0,0],\r\n            kotaichi:[\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"],\r\n            csvfile:undefined,\r\n            point:0\r\n        };\r\n    }\r\n\r\n// 読み込んだCSVデータを二次元配列に変換する関数convertCSVtoArray()の定義\r\n    convertCSVtoArray = (str, PokeNum) =>{ // 読み込んだCSVデータが文字列として渡される\r\n        return new Promise(resolve =>{\r\n            var result = str;\r\n            var copyName = this.state.Name.slice();\r\n            var copyAttack = this.state.Attack.slice();\r\n            var copyDefence = this.state.Defense.slice();\r\n            var copyHP = this.state.HP.slice();\r\n            var copySpAtk = this.state.SpAtk.slice();\r\n            var copySpDef = this.state.SpDef.slice();\r\n            var copySpeed = this.state.Speed.slice();\r\n            var copyParam = this.state.BaseParam.slice();\r\n\r\n            PokeNum = 1;\r\n            if(PokeNum === 1){\r\n                var Name = document.getElementById(\"pokeName\").value;\r\n                for(var i=1;i<result.length;i++){\r\n                    if(result[i][\"ポケモン名\"] === Name){\r\n                        console.log(\"Get Name\");\r\n                        copyName[0] = result[i][\"ポケモン名\"];\r\n                        copyAttack[0] = Number(result[i][\"こうげき\"]);\r\n                        copyDefence[0] = Number(result[i][\"ぼうぎょ\"]);\r\n                        copyHP[0] = Number(result[i][\"HP\"]);\r\n                        copySpAtk[0] = Number(result[i][\"とくこう\"]);\r\n                        copySpDef[0] = Number(result[i][\"とくぼう\"]);\r\n                        copySpeed[0] = Number(result[i][\"すばやさ\"]);\r\n                        \r\n                        copyParam[0] = Number(result[i][\"HP\"]);\r\n                        copyParam[1] = Number(result[i][\"こうげき\"]);\r\n                        copyParam[2] = Number(result[i][\"ぼうぎょ\"]);\r\n                        copyParam[3] = Number(result[i][\"とくこう\"]);\r\n                        copyParam[4] = Number(result[i][\"とくぼう\"]);\r\n                        copyParam[5] = Number(result[i][\"すばやさ\"]);\r\n\r\n                        this.setState({\r\n                            Name:copyName,\r\n                            Attack:copyAttack,\r\n                            Defense:copyDefence,\r\n                            HP:copyHP,\r\n                            SpAtk:copySpAtk,\r\n                            SpDef:copySpDef,\r\n                            Speed:copySpeed,\r\n                            BaseParam:copyParam\r\n                        })\r\n                    }\r\n                }\r\n            }     \r\n            resolve(\"1\");\r\n        });\r\n    }\r\n\r\n      getCSV = (PokeNum) =>{\r\n        return new Promise(resolve =>{\r\n            document.getElementById(\"HPDoryoku\").value = 0;\r\n            this.setState({\r\n                point:0\r\n            })\r\n            var reqq = new XMLHttpRequest();\r\n            reqq.open(\"get\", \"pokemon_status.csv\", true); // アクセスするファイルを指定\r\n            reqq.send(null); // HTTPリクエストの発行\r\n            \r\n            // レスポンスが返ってきたらconvertCSVtoArray()を呼ぶ\t\r\n            reqq.onload = ()=>{\r\n                Papa.parse(reqq.responseText, {\r\n                    header: true,\r\n                    delimiter:',',\r\n    \r\n                    complete:(buf) =>{\r\n                        console.log(buf.data);\r\n                        this.convertCSVtoArray(buf.data, PokeNum).then(() =>{\r\n                            resolve(\"0\");\r\n                        });\r\n                        resolve(\"0\");\r\n                    },\r\n                });\r\n                this.SettingParam().then(() =>{\r\n                    console.log(\"finish\");\r\n                    resolve(\"0\");\r\n                })\r\n                \r\n            }\r\n        });\r\n    }\r\n\r\n    SetDoryokuchi = (e) =>{\r\n        var copy = this.state.doryokuchi.slice();\r\n        var checkMax = 0;\r\n        for(var i=0;i<copy.length;i++){\r\n            checkMax = checkMax + copy[i];\r\n        }\r\n\r\n        if(e.target.id.match(/pluse/)){\r\n            if(copy[Number(e.target.id.substr(-1))] < 252 && checkMax < 510){\r\n                copy[Number(e.target.id.substr(-1))] = Number(copy[Number(e.target.id.substr(-1))]) + 4;\r\n            }\r\n        }else{\r\n            if(copy[Number(e.target.id.substr(-1))] > 4){\r\n                copy[Number(e.target.id.substr(-1))] = Number(copy[Number(e.target.id.substr(-1))]) - 4;\r\n            }\r\n            \r\n        }\r\n        this.setState({\r\n            doryokuchi:copy\r\n        })\r\n        this.SettingParam().then(() => {\r\n            console.log(\"finish\");\r\n        })\r\n        \r\n    }\r\n\r\n    SetKotaichi = (e) =>{\r\n        var copy = this.state.kotaichi.slice();\r\n        if(e.target.id.match(/pluse/)){\r\n            if(copy[Number(e.target.id.substr(-1))] <31){\r\n                copy[Number(e.target.id.substr(-1))] = Number(copy[Number(e.target.id.substr(-1))]) + 1;\r\n            }\r\n        }else{\r\n            if(copy[Number(e.target.id.substr(-1))] > 0){\r\n                copy[Number(e.target.id.substr(-1))] = Number(copy[Number(e.target.id.substr(-1))]) - 1;\r\n            }\r\n            \r\n        }\r\n        this.setState({\r\n            kotaichi:copy\r\n        })\r\n        this.SettingParam().then(() =>{\r\n            console.log(\"finish\");\r\n            return;\r\n        })\r\n    }\r\n\r\n    SettingParam = () =>{\r\n        return new Promise((resolve, reject) =>{\r\n            var Param = [\"HP\", \"Atk\", \"Def\", \"SP\", \"B\", \"C\"];\r\n        \r\n            (async () => {\r\n                for(var i=0;i<Param.length;i++){\r\n                    await this.CalcParam(Param[i], i);\r\n                }\r\n            })().catch(error => console.error(error));\r\n\r\n            resolve(\"bbb\");\r\n        })\r\n    }\r\n\r\n\r\n    CalcParam = (IdName, Num) =>{\r\n        return new Promise((resolve, reject) =>{\r\n            var DoryokuID = IdName + \"Doryoku\";\r\n            var KotaiID = IdName + \"Kotai\";\r\n            console.log(\"DoryokuID\" + DoryokuID +\" KotaiID:\" + KotaiID);\r\n\r\n            if(document.getElementById(DoryokuID) === null || document.getElementById(KotaiID) === null ){\r\n                console.log(\"doryoku null !!\");\r\n                resolve(-1);\r\n            }\r\n\r\n            var doryokuPoint = document.getElementById(DoryokuID).value;\r\n            var KotaiPoint = document.getElementById(KotaiID).value;\r\n        \r\n            var copySt = this.state.Poke1St.slice();\r\n            var BaseParam = this.state.BaseParam.slice();\r\n\r\n            copySt[Num] = BaseParam[Num];\r\n            copySt[Num] = copySt[Num] +Number(KotaiPoint/2);\r\n\r\n            if(doryokuPoint > 0){\r\n                copySt[Num] = copySt[Num] + Number((doryokuPoint - 4)/8);\r\n            }\r\n\r\n            console.log(\"copySt[Num]:\"+copySt[Num]);\r\n\r\n            this.setState({\r\n                Poke1St:copySt\r\n            })\r\n            resolve(1);\r\n        })\r\n    }\r\n\r\n    Radar = () =>{\r\n\r\n        const {HP} = this.state;\r\n        const {Attack} = this.state;\r\n        const {Defense} = this.state;\r\n        const {Speed} = this.state;\r\n        const {SpAtk} = this.state;\r\n        const {SpDef} = this.state;\r\n        const {Poke1St} = this.state;\r\n\r\n        const dataRadar = [\r\n            { rank: 'HP', poke1: Poke1St[0], poke2: HP[1] },\r\n            { rank: '攻撃', poke1: Poke1St[1], poke2: Attack[1] },\r\n            { rank: '防御', poke1: Poke1St[2], poke2: Defense[1] },\r\n            { rank: '素早さ', poke1: Poke1St[3], poke2: Speed[1] },\r\n            { rank: '特防', poke1: Poke1St[4], poke2: SpDef[1] },\r\n            { rank: '特攻', poke1: Poke1St[5], poke2: SpAtk[1] },\r\n            ];\r\n            \r\n        return(<RadarChart // レーダーチャートのサイズや位置、データを指定\r\n            height={400} width={500} cx=\"50%\" cy=\"50%\" data={dataRadar} //ここにArray型のデータを指定\r\n                >\r\n            <PolarGrid /> \r\n            <PolarAngleAxis\r\n                dataKey=\"rank\" //数値を表示したい値のキーを指定\r\n            />\r\n            <Radar //レーダーの色や各パラメーターのタイトルを指定\r\n                name=\"pokemon1\"  //hoverした時に表示される名前を指定 \r\n                dataKey=\"poke1\" //Array型のデータのパラメータータイトルを指定\r\n                stroke=\"#8884d8\"  //レーダーの線の色を指定\r\n                fill=\"#8884d8\" //レーダーの中身の色を指定\r\n                fillOpacity={0.6} //レーダーの中身の色の薄さを指定\r\n                    />\r\n                <Radar //レーダーの色や各パラメーターのタイトルを指定\r\n                    name=\"Mike\"  //hoverした時に表示される名前を指定 \r\n                    dataKey=\"poke2\" //Array型のデータのパラメータータイトルを指定\r\n                    stroke=\"#8884d8\"  //レーダーの線の色を指定\r\n                    fill=\"#A5A5A5A5\" //レーダーの中身の色を指定\r\n                    fillOpacity={0.6} //レーダーの中身の色の薄さを指定\r\n                />\r\n                <Tooltip /> //hoverすると各パラメーターの値が表示される\r\n            </RadarChart>\r\n        );\r\n    }\r\n\r\n    Set_DoryokuchiBox = (doryokuchi, doryokuchiID,Plus, Minus) =>{\r\n        const menulabel = doryokuchiID.substr(0,1);\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"doryokuchi_label\">\r\n                    <label>{menulabel}</label>\r\n                </div>\r\n                <div className=\"doryokuchi\">\r\n                    <input type=\"button\" value=\"+\" id={Plus} onClick={this.SetDoryokuchi} className=\"boxform\" /><br/>\r\n                    <input type=\"number\" name=\"doryoku\" min=\"0\" max=\"252\" value={doryokuchi} id={doryokuchiID} onChange={this.SetDoryokuchi} /><br/>\r\n                    <input type=\"button\" value=\"-\" id={Minus} onClick={this.SetDoryokuchi} className=\"boxform\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    Input_Doryokuchi = (input) =>{\r\n        var PlusArray = [\"PokeDoryokupluse0\",\"PokeDoryokupluse1\",\"PokeDoryokupluse2\",\"PokeDoryokupluse3\",\"PokeDoryokupluse4\",\"PokeDoryokupluse5\"];\r\n        var MinusArray = [\"PokeDoryokuminus0\",\"PokeDoryokuminus1\",\"PokeDoryokuminus2\",\"PokeDoryokuminus3\",\"PokeDoryokuminus4\",\"PokeDoryokuminus5\"];\r\n\r\n        for(var i=0;i<PlusArray.length;i++){\r\n            PlusArray[i] =  input + \"_\" + PlusArray[i];\r\n            MinusArray[i] = input + \"_\" + MinusArray[i];\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"doryokuchi_title\">\r\n                    <p>努力値</p>\r\n                </div>\r\n\r\n                <div className=\"input\">\r\n                    {this.Set_DoryokuchiBox(this.state.doryokuchi[0], \"HPDoryoku\",PlusArray[0], MinusArray[0])}\r\n                    {this.Set_DoryokuchiBox(this.state.doryokuchi[1], \"AtkDoryoku\",PlusArray[1], MinusArray[1])}\r\n                    {this.Set_DoryokuchiBox(this.state.doryokuchi[2], \"DefDoryoku\",PlusArray[2], MinusArray[2])}\r\n                    {this.Set_DoryokuchiBox(this.state.doryokuchi[3], \"CDoryoku\",PlusArray[3], MinusArray[3])}\r\n                    {this.Set_DoryokuchiBox(this.state.doryokuchi[4], \"BDoryoku\",PlusArray[4], MinusArray[4])}\r\n                    {this.Set_DoryokuchiBox(this.state.doryokuchi[5], \"SPDoryoku\",PlusArray[5], MinusArray[5])}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    Set_KotaichiBox = (Kotaichi, KotaichiID,Plus, Minus) =>{\r\n        const menulabel = KotaichiID.substr(0,1);\r\n\r\n        return(\r\n            <div>\r\n                <div className=\"doryokuchi_label\">\r\n                    <label>{menulabel}</label>\r\n                </div>\r\n                <div className=\"doryokuchi\">\r\n                    <input type=\"button\" value=\"+\" id={Plus} onClick={this.SetKotaichi} className=\"boxform\" /><br/>\r\n                    <input type=\"number\" name=\"num1\" min=\"0\" max=\"310\" value={Kotaichi} step=\"1\" id={KotaichiID} onChange={this.SetKotaichi} /><br/>\r\n                    <input type=\"button\" value=\"-\" id={Minus} onClick={this.SetKotaichi} className=\"boxform\" />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    Input_Kotaichi = (input) =>{\r\n        var PlusArray = [\"Pokekotaichipluse0\",\"Pokekotaichipluse1\",\"Pokekotaichipluse2\",\"Pokekotaichipluse3\",\"Pokekotaichipluse4\",\"Pokekotaichipluse5\"];\r\n        var MinusArray = [\"Pokekotaichiminus0\",\"Pokekotaichiminus1\",\"Pokekotaichiminus2\",\"Pokekotaichiminus3\",\"Pokekotaichiminus4\",\"Pokekotaichiminus5\"];\r\n\r\n        for(var i=0;i<PlusArray.length;i++){\r\n            PlusArray[i] =  input + \"_\" + PlusArray[i];\r\n            MinusArray[i] = input + \"_\" + MinusArray[i];\r\n        }\r\n\r\n        return(\r\n            <div className=\"input\">\r\n                <div className=\"doryokuchi_title\">\r\n                    <p>個体値</p>\r\n                </div>\r\n                {this.Set_KotaichiBox(this.state.kotaichi[0], \"HPKotai\", PlusArray[0], MinusArray[0])}\r\n                {this.Set_KotaichiBox(this.state.kotaichi[1], \"AtkKotai\", PlusArray[1], MinusArray[1])}\r\n                {this.Set_KotaichiBox(this.state.kotaichi[2], \"DefKotai\", PlusArray[2], MinusArray[2])}\r\n                {this.Set_KotaichiBox(this.state.kotaichi[3], \"CKotai\", PlusArray[3], MinusArray[3])}\r\n                {this.Set_KotaichiBox(this.state.kotaichi[4], \"BKotai\", PlusArray[4], MinusArray[4])}\r\n                {this.Set_KotaichiBox(this.state.kotaichi[5], \"SPKotai\", PlusArray[5], MinusArray[5])}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (<div>\r\n            <div className=\"pokename_title\">\r\n                <h1>ポケモンチャート</h1>\r\n            </div>\r\n            <div className=\"ParamWaku\">\r\n            <div className=\"pokename_title\">\r\n                <a>ポケモン名：</a>\r\n                <input type=\"text\" id=\"pokeName\" maxLength=\"20\"/>\r\n                <input type=\"button\" value=\"Click\" onClick={() => this.getCSV(1)}></input><br/>\r\n            </div>\r\n    \r\n           \r\n                {this.Input_Doryokuchi(1)}\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                {this.Input_Kotaichi(1)}\r\n            </div>\r\n            <br/>\r\n            {this.Radar()};\r\n        </div>);\r\n    }\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pokechart from './pokechart';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pokechart />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}