{"ast":null,"code":"var util = require('./util');\n\nvar EncodingTable = require('./encoding-table');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty; // Alternate character when can't detect\n\nexports.UNKNOWN_CHARACTER = 63; // '?'\n\nvar HAS_TYPED = exports.HAS_TYPED = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined'; // Test for String.fromCharCode.apply\n\nvar CAN_CHARCODE_APPLY = false;\nvar CAN_CHARCODE_APPLY_TYPED = false;\n\ntry {\n  if (String.fromCharCode.apply(null, [0x61]) === 'a') {\n    CAN_CHARCODE_APPLY = true;\n  }\n} catch (e) {}\n\nif (HAS_TYPED) {\n  try {\n    if (String.fromCharCode.apply(null, new Uint8Array([0x61])) === 'a') {\n      CAN_CHARCODE_APPLY_TYPED = true;\n    }\n  } catch (e) {}\n}\n\nexports.CAN_CHARCODE_APPLY = CAN_CHARCODE_APPLY;\nexports.CAN_CHARCODE_APPLY_TYPED = CAN_CHARCODE_APPLY_TYPED; // Function.prototype.apply stack max range\n\nexports.APPLY_BUFFER_SIZE = 65533;\nexports.APPLY_BUFFER_SIZE_OK = null;\nvar EncodingNames = exports.EncodingNames = {\n  UTF32: {\n    order: 0\n  },\n  UTF32BE: {\n    alias: ['UCS4']\n  },\n  UTF32LE: null,\n  UTF16: {\n    order: 1\n  },\n  UTF16BE: {\n    alias: ['UCS2']\n  },\n  UTF16LE: null,\n  BINARY: {\n    order: 2\n  },\n  ASCII: {\n    order: 3,\n    alias: ['ISO646', 'CP367']\n  },\n  JIS: {\n    order: 4,\n    alias: ['ISO2022JP']\n  },\n  UTF8: {\n    order: 5\n  },\n  EUCJP: {\n    order: 6\n  },\n  SJIS: {\n    order: 7,\n    alias: ['CP932', 'MSKANJI', 'WINDOWS31J']\n  },\n  UNICODE: {\n    order: 8\n  }\n};\nvar EncodingAliases = {};\n\nexports.EncodingOrders = function () {\n  var aliases = EncodingAliases;\n  var names = util.getKeys(EncodingNames);\n  var orders = [];\n  var name, encoding, j, l;\n\n  for (var i = 0, len = names.length; i < len; i++) {\n    name = names[i];\n    aliases[name] = name;\n    encoding = EncodingNames[name];\n\n    if (encoding != null) {\n      if (typeof encoding.order !== 'undefined') {\n        orders[orders.length] = name;\n      }\n\n      if (encoding.alias) {\n        // Create encoding aliases\n        for (j = 0, l = encoding.alias.length; j < l; j++) {\n          aliases[encoding.alias[j]] = name;\n        }\n      }\n    }\n  }\n\n  orders.sort(function (a, b) {\n    return EncodingNames[a].order - EncodingNames[b].order;\n  });\n  return orders;\n}();\n\nfunction init_JIS_TO_UTF8_TABLE() {\n  if (EncodingTable.JIS_TO_UTF8_TABLE === null) {\n    EncodingTable.JIS_TO_UTF8_TABLE = {};\n    var keys = util.getKeys(EncodingTable.UTF8_TO_JIS_TABLE);\n    var i = 0;\n    var len = keys.length;\n    var key, value;\n\n    for (; i < len; i++) {\n      key = keys[i];\n      value = EncodingTable.UTF8_TO_JIS_TABLE[key];\n\n      if (value > 0x5F) {\n        EncodingTable.JIS_TO_UTF8_TABLE[value] = key | 0;\n      }\n    }\n\n    EncodingTable.JISX0212_TO_UTF8_TABLE = {};\n    keys = util.getKeys(EncodingTable.UTF8_TO_JISX0212_TABLE);\n    len = keys.length;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      value = EncodingTable.UTF8_TO_JISX0212_TABLE[key];\n      EncodingTable.JISX0212_TO_UTF8_TABLE[value] = key | 0;\n    }\n  }\n}\n\nexports.init_JIS_TO_UTF8_TABLE = init_JIS_TO_UTF8_TABLE;\n/**\n * Assign the internal encoding name from the argument encoding name\n */\n\nfunction assignEncodingName(target) {\n  var name = '';\n  var expect = ('' + target).toUpperCase().replace(/[^A-Z0-9]+/g, '');\n  var aliasNames = util.getKeys(EncodingAliases);\n  var len = aliasNames.length;\n  var hit = 0;\n  var encoding, encodingLen, j;\n\n  for (var i = 0; i < len; i++) {\n    encoding = aliasNames[i];\n\n    if (encoding === expect) {\n      name = encoding;\n      break;\n    }\n\n    encodingLen = encoding.length;\n\n    for (j = hit; j < encodingLen; j++) {\n      if (encoding.slice(0, j) === expect.slice(0, j) || encoding.slice(-j) === expect.slice(-j)) {\n        name = encoding;\n        hit = j;\n      }\n    }\n  }\n\n  if (hasOwnProperty.call(EncodingAliases, name)) {\n    return EncodingAliases[name];\n  }\n\n  return name;\n}\n\nexports.assignEncodingName = assignEncodingName;","map":{"version":3,"sources":["/home/hiro/PokeChart/node_modules/encoding-japanese/src/config.js"],"names":["util","require","EncodingTable","hasOwnProperty","Object","prototype","exports","UNKNOWN_CHARACTER","HAS_TYPED","Uint8Array","Uint16Array","CAN_CHARCODE_APPLY","CAN_CHARCODE_APPLY_TYPED","String","fromCharCode","apply","e","APPLY_BUFFER_SIZE","APPLY_BUFFER_SIZE_OK","EncodingNames","UTF32","order","UTF32BE","alias","UTF32LE","UTF16","UTF16BE","UTF16LE","BINARY","ASCII","JIS","UTF8","EUCJP","SJIS","UNICODE","EncodingAliases","EncodingOrders","aliases","names","getKeys","orders","name","encoding","j","l","i","len","length","sort","a","b","init_JIS_TO_UTF8_TABLE","JIS_TO_UTF8_TABLE","keys","UTF8_TO_JIS_TABLE","key","value","JISX0212_TO_UTF8_TABLE","UTF8_TO_JISX0212_TABLE","assignEncodingName","target","expect","toUpperCase","replace","aliasNames","hit","encodingLen","slice","call"],"mappings":"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","sourcesContent":["var util = require('./util');\nvar EncodingTable = require('./encoding-table');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n// Alternate character when can't detect\nexports.UNKNOWN_CHARACTER = 63; // '?'\n\nvar HAS_TYPED = exports.HAS_TYPED = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined';\n\n// Test for String.fromCharCode.apply\nvar CAN_CHARCODE_APPLY = false;\nvar CAN_CHARCODE_APPLY_TYPED = false;\n\ntry {\n  if (String.fromCharCode.apply(null, [0x61]) === 'a') {\n    CAN_CHARCODE_APPLY = true;\n  }\n} catch (e) {}\n\nif (HAS_TYPED) {\n  try {\n    if (String.fromCharCode.apply(null, new Uint8Array([0x61])) === 'a') {\n      CAN_CHARCODE_APPLY_TYPED = true;\n    }\n  } catch (e) {}\n}\n\nexports.CAN_CHARCODE_APPLY = CAN_CHARCODE_APPLY;\nexports.CAN_CHARCODE_APPLY_TYPED = CAN_CHARCODE_APPLY_TYPED;\n\n// Function.prototype.apply stack max range\nexports.APPLY_BUFFER_SIZE = 65533;\nexports.APPLY_BUFFER_SIZE_OK = null;\n\n\nvar EncodingNames = exports.EncodingNames = {\n  UTF32: {\n    order: 0\n  },\n  UTF32BE: {\n    alias: ['UCS4']\n  },\n  UTF32LE: null,\n  UTF16: {\n    order: 1\n  },\n  UTF16BE: {\n    alias: ['UCS2']\n  },\n  UTF16LE: null,\n  BINARY: {\n    order: 2\n  },\n  ASCII: {\n    order: 3,\n    alias: ['ISO646', 'CP367']\n  },\n  JIS: {\n    order: 4,\n    alias: ['ISO2022JP']\n  },\n  UTF8: {\n    order: 5\n  },\n  EUCJP: {\n    order: 6\n  },\n  SJIS: {\n    order: 7,\n    alias: ['CP932', 'MSKANJI', 'WINDOWS31J']\n  },\n  UNICODE: {\n    order: 8\n  }\n};\n\nvar EncodingAliases = {};\n\nexports.EncodingOrders = (function() {\n  var aliases = EncodingAliases;\n\n  var names = util.getKeys(EncodingNames);\n  var orders = [];\n  var name, encoding, j, l;\n\n  for (var i = 0, len = names.length; i < len; i++) {\n    name = names[i];\n    aliases[name] = name;\n\n    encoding = EncodingNames[name];\n    if (encoding != null) {\n      if (typeof encoding.order !== 'undefined') {\n        orders[orders.length] = name;\n      }\n\n      if (encoding.alias) {\n        // Create encoding aliases\n        for (j = 0, l = encoding.alias.length; j < l; j++) {\n          aliases[encoding.alias[j]] = name;\n        }\n      }\n    }\n  }\n\n  orders.sort(function(a, b) {\n    return EncodingNames[a].order - EncodingNames[b].order;\n  });\n\n  return orders;\n}());\n\n\nfunction init_JIS_TO_UTF8_TABLE() {\n  if (EncodingTable.JIS_TO_UTF8_TABLE === null) {\n    EncodingTable.JIS_TO_UTF8_TABLE = {};\n\n    var keys = util.getKeys(EncodingTable.UTF8_TO_JIS_TABLE);\n    var i = 0;\n    var len = keys.length;\n    var key, value;\n\n    for (; i < len; i++) {\n      key = keys[i];\n      value = EncodingTable.UTF8_TO_JIS_TABLE[key];\n      if (value > 0x5F) {\n        EncodingTable.JIS_TO_UTF8_TABLE[value] = key | 0;\n      }\n    }\n\n    EncodingTable.JISX0212_TO_UTF8_TABLE = {};\n    keys = util.getKeys(EncodingTable.UTF8_TO_JISX0212_TABLE);\n    len = keys.length;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      value = EncodingTable.UTF8_TO_JISX0212_TABLE[key];\n      EncodingTable.JISX0212_TO_UTF8_TABLE[value] = key | 0;\n    }\n  }\n}\nexports.init_JIS_TO_UTF8_TABLE = init_JIS_TO_UTF8_TABLE;\n\n/**\n * Assign the internal encoding name from the argument encoding name\n */\nfunction assignEncodingName(target) {\n  var name = '';\n  var expect = ('' + target).toUpperCase().replace(/[^A-Z0-9]+/g, '');\n  var aliasNames = util.getKeys(EncodingAliases);\n  var len = aliasNames.length;\n  var hit = 0;\n  var encoding, encodingLen, j;\n\n  for (var i = 0; i < len; i++) {\n    encoding = aliasNames[i];\n    if (encoding === expect) {\n      name = encoding;\n      break;\n    }\n\n    encodingLen = encoding.length;\n    for (j = hit; j < encodingLen; j++) {\n      if (encoding.slice(0, j) === expect.slice(0, j) ||\n          encoding.slice(-j) === expect.slice(-j)) {\n        name = encoding;\n        hit = j;\n      }\n    }\n  }\n\n  if (hasOwnProperty.call(EncodingAliases, name)) {\n    return EncodingAliases[name];\n  }\n\n  return name;\n}\nexports.assignEncodingName = assignEncodingName;\n"]},"metadata":{},"sourceType":"script"}