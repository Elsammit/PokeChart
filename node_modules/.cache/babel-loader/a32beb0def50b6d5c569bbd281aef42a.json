{"ast":null,"code":"var config = require('./config');\n\nvar util = require('./util');\n\nvar EncodingDetect = require('./encoding-detect');\n\nvar EncodingConvert = require('./encoding-convert');\n\nvar KanaCaseTable = require('./kana-case-table');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar Encoding = {\n  /**\n   * Encoding orders\n   */\n  orders: config.EncodingOrders,\n\n  /**\n   * Detects character encoding\n   *\n   * If encodings is \"AUTO\", or the encoding-list as an array, or\n   *   comma separated list string it will be detected automatically\n   *\n   * @param {Array.<number>|TypedArray|string} data The data being detected\n   * @param {(Object|string|Array.<string>)=} [encodings] The encoding-list of\n   *   character encoding\n   * @return {string|boolean} The detected character encoding, or false\n   */\n  detect: function (data, encodings) {\n    if (data == null || data.length === 0) {\n      return false;\n    }\n\n    if (util.isObject(encodings) && !util.isArray(encodings)) {\n      encodings = encodings.encoding;\n    }\n\n    if (util.isString(data)) {\n      data = util.stringToBuffer(data);\n    }\n\n    if (encodings == null) {\n      encodings = Encoding.orders;\n    } else {\n      if (util.isString(encodings)) {\n        encodings = encodings.toUpperCase();\n\n        if (encodings === 'AUTO') {\n          encodings = Encoding.orders;\n        } else if (~encodings.indexOf(',')) {\n          encodings = encodings.split(/\\s*,\\s*/);\n        } else {\n          encodings = [encodings];\n        }\n      }\n    }\n\n    var len = encodings.length;\n    var e, encoding, method;\n\n    for (var i = 0; i < len; i++) {\n      e = encodings[i];\n      encoding = config.assignEncodingName(e);\n\n      if (!encoding) {\n        continue;\n      }\n\n      method = 'is' + encoding;\n\n      if (!hasOwnProperty.call(EncodingDetect, method)) {\n        throw new Error('Undefined encoding: ' + e);\n      }\n\n      if (EncodingDetect[method](data)) {\n        return encoding;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Convert character encoding\n   *\n   * If `from` is \"AUTO\", or the encoding-list as an array, or\n   *   comma separated list string it will be detected automatically\n   *\n   * @param {Array.<number>|TypedArray|string} data The data being converted\n   * @param {(string|Object)} to The name of encoding to\n   * @param {(string|Array.<string>)=} [from] The encoding-list of\n   *   character encoding\n   * @return {Array|TypedArray|string} The converted data\n   */\n  convert: function (data, to, from) {\n    var result;\n    var type;\n    var options = {};\n\n    if (util.isObject(to)) {\n      options = to;\n      from = options.from;\n      to = options.to;\n\n      if (options.type) {\n        type = options.type;\n      }\n    }\n\n    if (util.isString(data)) {\n      type = type || 'string';\n      data = util.stringToBuffer(data);\n    } else if (data == null || data.length === 0) {\n      data = [];\n    }\n\n    var encodingFrom;\n\n    if (from != null && util.isString(from) && from.toUpperCase() !== 'AUTO' && !~from.indexOf(',')) {\n      encodingFrom = config.assignEncodingName(from);\n    } else {\n      encodingFrom = Encoding.detect(data);\n    }\n\n    var encodingTo = config.assignEncodingName(to);\n    var method = encodingFrom + 'To' + encodingTo;\n\n    if (hasOwnProperty.call(EncodingConvert, method)) {\n      result = EncodingConvert[method](data, options);\n    } else {\n      // Returns the raw data if the method is undefined.\n      result = data;\n    }\n\n    switch (('' + type).toLowerCase()) {\n      case 'string':\n        return util.codeToString_fast(result);\n\n      case 'arraybuffer':\n        return util.codeToBuffer(result);\n\n      case 'array':\n      /* falls through */\n\n      default:\n        return util.bufferToCode(result);\n    }\n  },\n\n  /**\n   * Encode a character code array to URL string like encodeURIComponent\n   *\n   * @param {Array.<number>|TypedArray} data The data being encoded\n   * @return {string} The percent encoded string\n   */\n  urlEncode: function (data) {\n    if (util.isString(data)) {\n      data = util.stringToBuffer(data);\n    }\n\n    var alpha = util.stringToCode('0123456789ABCDEF');\n    var results = [];\n    var i = 0;\n    var len = data && data.length;\n    var b;\n\n    for (; i < len; i++) {\n      b = data[i]; //FIXME: JavaScript UTF-16 encoding\n\n      if (b > 0xFF) {\n        return encodeURIComponent(util.codeToString_fast(data));\n      }\n\n      if (b >= 0x61\n      /*a*/\n      && b <= 0x7A\n      /*z*/\n      || b >= 0x41\n      /*A*/\n      && b <= 0x5A\n      /*Z*/\n      || b >= 0x30\n      /*0*/\n      && b <= 0x39\n      /*9*/\n      || b === 0x21\n      /*!*/\n      || b >= 0x27\n      /*'*/\n      && b <= 0x2A\n      /***/\n      || b === 0x2D\n      /*-*/\n      || b === 0x2E\n      /*.*/\n      || b === 0x5F\n      /*_*/\n      || b === 0x7E\n      /*~*/\n      ) {\n          results[results.length] = b;\n        } else {\n        results[results.length] = 0x25;\n        /*%*/\n\n        if (b < 0x10) {\n          results[results.length] = 0x30;\n          /*0*/\n\n          results[results.length] = alpha[b];\n        } else {\n          results[results.length] = alpha[b >> 4 & 0xF];\n          results[results.length] = alpha[b & 0xF];\n        }\n      }\n    }\n\n    return util.codeToString_fast(results);\n  },\n\n  /**\n   * Decode a percent encoded string to\n   *  character code array like decodeURIComponent\n   *\n   * @param {string} string The data being decoded\n   * @return {Array.<number>} The decoded array\n   */\n  urlDecode: function (string) {\n    var results = [];\n    var i = 0;\n    var len = string && string.length;\n    var c;\n\n    while (i < len) {\n      c = string.charCodeAt(i++);\n\n      if (c === 0x25\n      /*%*/\n      ) {\n          results[results.length] = parseInt(string.charAt(i++) + string.charAt(i++), 16);\n        } else {\n        results[results.length] = c;\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Encode a character code array to Base64 encoded string\n   *\n   * @param {Array.<number>|TypedArray} data The data being encoded\n   * @return {string} The Base64 encoded string\n   */\n  base64Encode: function (data) {\n    if (util.isString(data)) {\n      data = util.stringToBuffer(data);\n    }\n\n    return util.base64encode(data);\n  },\n\n  /**\n   * Decode a Base64 encoded string to character code array\n   *\n   * @param {string} string The data being decoded\n   * @return {Array.<number>} The decoded array\n   */\n  base64Decode: function (string) {\n    return util.base64decode(string);\n  },\n\n  /**\n   * Joins a character code array to string\n   *\n   * @param {Array.<number>|TypedArray} data The data being joined\n   * @return {String} The joined string\n   */\n  codeToString: util.codeToString_fast,\n\n  /**\n   * Splits string to an array of character codes\n   *\n   * @param {string} string The input string\n   * @return {Array.<number>} The character code array\n   */\n  stringToCode: util.stringToCode,\n\n  /**\n   * 全角英数記号文字を半角英数記号文字に変換\n   *\n   * Convert the ascii symbols and alphanumeric characters to\n   *   the zenkaku symbols and alphanumeric characters\n   *\n   * @example\n   *   console.log(Encoding.toHankakuCase('Ｈｅｌｌｏ Ｗｏｒｌｄ！ １２３４５'));\n   *   // 'Hello World! 12345'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHankakuCase: function (data) {\n    var asString = false;\n\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c >= 0xFF01 && c <= 0xFF5E) {\n        c -= 0xFEE0;\n      }\n\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 半角英数記号文字を全角英数記号文字に変換\n   *\n   * Convert to the zenkaku symbols and alphanumeric characters\n   *  from the ascii symbols and alphanumeric characters\n   *\n   * @example\n   *   console.log(Encoding.toZenkakuCase('Hello World! 12345'));\n   *   // 'Ｈｅｌｌｏ Ｗｏｒｌｄ！ １２３４５'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toZenkakuCase: function (data) {\n    var asString = false;\n\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c >= 0x21 && c <= 0x7E) {\n        c += 0xFEE0;\n      }\n\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角カタカナを全角ひらがなに変換\n   *\n   * Convert to the zenkaku hiragana from the zenkaku katakana\n   *\n   * @example\n   *   console.log(Encoding.toHiraganaCase('ボポヴァアィイゥウェエォオ'));\n   *   // 'ぼぽう゛ぁあぃいぅうぇえぉお'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHiraganaCase: function (data) {\n    var asString = false;\n\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c >= 0x30A1 && c <= 0x30F6) {\n        c -= 0x0060; // 「ワ゛」 => 「わ」 + 「゛」\n      } else if (c === 0x30F7) {\n        results[results.length] = 0x308F;\n        c = 0x309B; // 「ヲ゛」 => 「を」 + 「゛」\n      } else if (c === 0x30FA) {\n        results[results.length] = 0x3092;\n        c = 0x309B;\n      }\n\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角ひらがなを全角カタカナに変換\n   *\n   * Convert to the zenkaku katakana from the zenkaku hiragana\n   *\n   * @example\n   *   console.log(Encoding.toKatakanaCase('ぼぽう゛ぁあぃいぅうぇえぉお'));\n   *   // 'ボポヴァアィイゥウェエォオ'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toKatakanaCase: function (data) {\n    var asString = false;\n\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c >= 0x3041 && c <= 0x3096) {\n        if ((c === 0x308F || // 「わ」 + 「゛」 => 「ワ゛」\n        c === 0x3092) && // 「を」 + 「゛」 => 「ヲ゛」\n        i < len && data[i] === 0x309B) {\n          c = c === 0x308F ? 0x30F7 : 0x30FA;\n          i++;\n        } else {\n          c += 0x0060;\n        }\n      }\n\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角カタカナを半角ｶﾀｶﾅに変換\n   *\n   * Convert to the hankaku katakana from the zenkaku katakana\n   *\n   * @example\n   *   console.log(Encoding.toHankanaCase('ボポヴァアィイゥウェエォオ'));\n   *   // 'ﾎﾞﾎﾟｳﾞｧｱｨｲｩｳｪｴｫｵ'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHankanaCase: function (data) {\n    var asString = false;\n\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c, d, t;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c >= 0x3001 && c <= 0x30FC) {\n        t = KanaCaseTable.HANKANA_TABLE[c];\n\n        if (t !== void 0) {\n          results[results.length] = t;\n          continue;\n        }\n      } // 「ヴ」, 「ワ」+「゛」, 「ヲ」+「゛」\n\n\n      if (c === 0x30F4 || c === 0x30F7 || c === 0x30FA) {\n        results[results.length] = KanaCaseTable.HANKANA_SONANTS[c];\n        results[results.length] = 0xFF9E; // 「カ」 - 「ド」\n      } else if (c >= 0x30AB && c <= 0x30C9) {\n        results[results.length] = KanaCaseTable.HANKANA_TABLE[c - 1];\n        results[results.length] = 0xFF9E; // 「ハ」 - 「ポ」\n      } else if (c >= 0x30CF && c <= 0x30DD) {\n        d = c % 3;\n        results[results.length] = KanaCaseTable.HANKANA_TABLE[c - d];\n        results[results.length] = KanaCaseTable.HANKANA_MARKS[d - 1];\n      } else {\n        results[results.length] = c;\n      }\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 半角ｶﾀｶﾅを全角カタカナに変換 (濁音含む)\n   *\n   * Convert to the zenkaku katakana from the hankaku katakana\n   *\n   * @example\n   *   console.log(Encoding.toZenkanaCase('ﾎﾞﾎﾟｳﾞｧｱｨｲｩｳｪｴｫｵ'));\n   *   // 'ボポヴァアィイゥウェエォオ'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toZenkanaCase: function (data) {\n    var asString = false;\n\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c, code, next;\n\n    for (i = 0; i < len; i++) {\n      c = data[i]; // Hankaku katakana\n\n      if (c > 0xFF60 && c < 0xFFA0) {\n        code = KanaCaseTable.ZENKANA_TABLE[c - 0xFF61];\n\n        if (i + 1 < len) {\n          next = data[i + 1]; // 「ﾞ」 + 「ヴ」\n\n          if (next === 0xFF9E && c === 0xFF73) {\n            code = 0x30F4;\n            i++; // 「ﾞ」 + 「ワ゛」\n          } else if (next === 0xFF9E && c === 0xFF9C) {\n            code = 0x30F7;\n            i++; // 「ﾞ」 + 「ｦ゛」\n          } else if (next === 0xFF9E && c === 0xFF66) {\n            code = 0x30FA;\n            i++; // 「ﾞ」 + 「カ」 - 「コ」 or 「ハ」 - 「ホ」\n          } else if (next === 0xFF9E && (c > 0xFF75 && c < 0xFF85 || c > 0xFF89 && c < 0xFF8F)) {\n            code++;\n            i++; // 「ﾟ」 + 「ハ」 - 「ホ」\n          } else if (next === 0xFF9F && c > 0xFF89 && c < 0xFF8F) {\n            code += 2;\n            i++;\n          }\n        }\n\n        c = code;\n      }\n\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角スペースを半角スペースに変換\n   *\n   * Convert the em space(U+3000) to the single space(U+0020)\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHankakuSpace: function (data) {\n    if (util.isString(data)) {\n      return data.replace(/\\u3000/g, ' ');\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c === 0x3000) {\n        c = 0x20;\n      }\n\n      results[results.length] = c;\n    }\n\n    return results;\n  },\n\n  /**\n   * 半角スペースを全角スペースに変換\n   *\n   * Convert the single space(U+0020) to the em space(U+3000)\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toZenkakuSpace: function (data) {\n    if (util.isString(data)) {\n      return data.replace(/\\u0020/g, '\\u3000');\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c === 0x20) {\n        c = 0x3000;\n      }\n\n      results[results.length] = c;\n    }\n\n    return results;\n  }\n};\nmodule.exports = Encoding;","map":{"version":3,"sources":["/home/hiro/PokeChart/node_modules/encoding-japanese/src/index.js"],"names":["config","require","util","EncodingDetect","EncodingConvert","KanaCaseTable","hasOwnProperty","Object","prototype","Encoding","orders","EncodingOrders","detect","data","encodings","length","isObject","isArray","encoding","isString","stringToBuffer","toUpperCase","indexOf","split","len","e","method","i","assignEncodingName","call","Error","convert","to","from","result","type","options","encodingFrom","encodingTo","toLowerCase","codeToString_fast","codeToBuffer","bufferToCode","urlEncode","alpha","stringToCode","results","b","encodeURIComponent","urlDecode","string","c","charCodeAt","parseInt","charAt","base64Encode","base64encode","base64Decode","base64decode","codeToString","toHankakuCase","asString","toZenkakuCase","toHiraganaCase","toKatakanaCase","toHankanaCase","d","t","HANKANA_TABLE","HANKANA_SONANTS","HANKANA_MARKS","toZenkanaCase","code","next","ZENKANA_TABLE","toHankakuSpace","replace","toZenkakuSpace","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,mBAAD,CAA3B;;AAEA,IAAIK,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAtC;AAEA,IAAIG,QAAQ,GAAG;AAEb;;;AAGAC,EAAAA,MAAM,EAAEV,MAAM,CAACW,cALF;;AAOb;;;;;;;;;;;AAWAC,EAAAA,MAAM,EAAE,UAASC,IAAT,EAAeC,SAAf,EAA0B;AAChC,QAAID,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACE,MAAL,KAAgB,CAApC,EAAuC;AACrC,aAAO,KAAP;AACD;;AAED,QAAIb,IAAI,CAACc,QAAL,CAAcF,SAAd,KAA4B,CAACZ,IAAI,CAACe,OAAL,CAAaH,SAAb,CAAjC,EAA0D;AACxDA,MAAAA,SAAS,GAAGA,SAAS,CAACI,QAAtB;AACD;;AAED,QAAIhB,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBA,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIC,SAAS,IAAI,IAAjB,EAAuB;AACrBA,MAAAA,SAAS,GAAGL,QAAQ,CAACC,MAArB;AACD,KAFD,MAEO;AACL,UAAIR,IAAI,CAACiB,QAAL,CAAcL,SAAd,CAAJ,EAA8B;AAC5BA,QAAAA,SAAS,GAAGA,SAAS,CAACO,WAAV,EAAZ;;AACA,YAAIP,SAAS,KAAK,MAAlB,EAA0B;AACxBA,UAAAA,SAAS,GAAGL,QAAQ,CAACC,MAArB;AACD,SAFD,MAEO,IAAI,CAACI,SAAS,CAACQ,OAAV,CAAkB,GAAlB,CAAL,EAA6B;AAClCR,UAAAA,SAAS,GAAGA,SAAS,CAACS,KAAV,CAAgB,SAAhB,CAAZ;AACD,SAFM,MAEA;AACLT,UAAAA,SAAS,GAAG,CAACA,SAAD,CAAZ;AACD;AACF;AACF;;AAED,QAAIU,GAAG,GAAGV,SAAS,CAACC,MAApB;AACA,QAAIU,CAAJ,EAAOP,QAAP,EAAiBQ,MAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5BF,MAAAA,CAAC,GAAGX,SAAS,CAACa,CAAD,CAAb;AACAT,MAAAA,QAAQ,GAAGlB,MAAM,CAAC4B,kBAAP,CAA0BH,CAA1B,CAAX;;AACA,UAAI,CAACP,QAAL,EAAe;AACb;AACD;;AAEDQ,MAAAA,MAAM,GAAG,OAAOR,QAAhB;;AACA,UAAI,CAACZ,cAAc,CAACuB,IAAf,CAAoB1B,cAApB,EAAoCuB,MAApC,CAAL,EAAkD;AAChD,cAAM,IAAII,KAAJ,CAAU,yBAAyBL,CAAnC,CAAN;AACD;;AAED,UAAItB,cAAc,CAACuB,MAAD,CAAd,CAAuBb,IAAvB,CAAJ,EAAkC;AAChC,eAAOK,QAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD,GAlEY;;AAoEb;;;;;;;;;;;;AAYAa,EAAAA,OAAO,EAAE,UAASlB,IAAT,EAAemB,EAAf,EAAmBC,IAAnB,EAAyB;AAChC,QAAIC,MAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,OAAO,GAAG,EAAd;;AAEA,QAAIlC,IAAI,CAACc,QAAL,CAAcgB,EAAd,CAAJ,EAAuB;AACrBI,MAAAA,OAAO,GAAGJ,EAAV;AACAC,MAAAA,IAAI,GAAGG,OAAO,CAACH,IAAf;AACAD,MAAAA,EAAE,GAAGI,OAAO,CAACJ,EAAb;;AACA,UAAII,OAAO,CAACD,IAAZ,EAAkB;AAChBA,QAAAA,IAAI,GAAGC,OAAO,CAACD,IAAf;AACD;AACF;;AAED,QAAIjC,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBsB,MAAAA,IAAI,GAAGA,IAAI,IAAI,QAAf;AACAtB,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD,KAHD,MAGO,IAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACE,MAAL,KAAgB,CAApC,EAAuC;AAC5CF,MAAAA,IAAI,GAAG,EAAP;AACD;;AAED,QAAIwB,YAAJ;;AACA,QAAIJ,IAAI,IAAI,IAAR,IAAgB/B,IAAI,CAACiB,QAAL,CAAcc,IAAd,CAAhB,IACAA,IAAI,CAACZ,WAAL,OAAuB,MADvB,IACiC,CAAC,CAACY,IAAI,CAACX,OAAL,CAAa,GAAb,CADvC,EAC0D;AACxDe,MAAAA,YAAY,GAAGrC,MAAM,CAAC4B,kBAAP,CAA0BK,IAA1B,CAAf;AACD,KAHD,MAGO;AACLI,MAAAA,YAAY,GAAG5B,QAAQ,CAACG,MAAT,CAAgBC,IAAhB,CAAf;AACD;;AAED,QAAIyB,UAAU,GAAGtC,MAAM,CAAC4B,kBAAP,CAA0BI,EAA1B,CAAjB;AACA,QAAIN,MAAM,GAAGW,YAAY,GAAG,IAAf,GAAsBC,UAAnC;;AAEA,QAAIhC,cAAc,CAACuB,IAAf,CAAoBzB,eAApB,EAAqCsB,MAArC,CAAJ,EAAkD;AAChDQ,MAAAA,MAAM,GAAG9B,eAAe,CAACsB,MAAD,CAAf,CAAwBb,IAAxB,EAA8BuB,OAA9B,CAAT;AACD,KAFD,MAEO;AACL;AACAF,MAAAA,MAAM,GAAGrB,IAAT;AACD;;AAED,YAAQ,CAAC,KAAKsB,IAAN,EAAYI,WAAZ,EAAR;AACE,WAAK,QAAL;AACE,eAAOrC,IAAI,CAACsC,iBAAL,CAAuBN,MAAvB,CAAP;;AACF,WAAK,aAAL;AACE,eAAOhC,IAAI,CAACuC,YAAL,CAAkBP,MAAlB,CAAP;;AACF,WAAK,OAAL;AACE;;AACF;AACE,eAAOhC,IAAI,CAACwC,YAAL,CAAkBR,MAAlB,CAAP;AARJ;AAUD,GAjIY;;AAmIb;;;;;;AAMAS,EAAAA,SAAS,EAAE,UAAS9B,IAAT,EAAe;AACxB,QAAIX,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBA,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAI+B,KAAK,GAAG1C,IAAI,CAAC2C,YAAL,CAAkB,kBAAlB,CAAZ;AACA,QAAIC,OAAO,GAAG,EAAd;AACA,QAAInB,CAAC,GAAG,CAAR;AACA,QAAIH,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIgC,CAAJ;;AAEA,WAAOpB,CAAC,GAAGH,GAAX,EAAgBG,CAAC,EAAjB,EAAqB;AACnBoB,MAAAA,CAAC,GAAGlC,IAAI,CAACc,CAAD,CAAR,CADmB,CAGnB;;AACA,UAAIoB,CAAC,GAAG,IAAR,EAAc;AACZ,eAAOC,kBAAkB,CAAC9C,IAAI,CAACsC,iBAAL,CAAuB3B,IAAvB,CAAD,CAAzB;AACD;;AAED,UAAKkC,CAAC,IAAI;AAAK;AAAV,SAAmBA,CAAC,IAAI;AAAK;AAA9B,SACCA,CAAC,IAAI;AAAK;AAAV,SAAmBA,CAAC,IAAI;AAAK;AAD9B,SAECA,CAAC,IAAI;AAAK;AAAV,SAAmBA,CAAC,IAAI;AAAK;AAF9B,SAGAA,CAAC,KAAK;AAAK;AAHX,SAICA,CAAC,IAAI;AAAK;AAAV,SAAmBA,CAAC,IAAI;AAAK;AAJ9B,SAKAA,CAAC,KAAK;AAAK;AALX,SAKoBA,CAAC,KAAK;AAAK;AAL/B,SAMAA,CAAC,KAAK;AAAK;AANX,SAMoBA,CAAC,KAAK;AAAK;AANnC,QAOE;AACAD,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BgC,CAA1B;AACD,SATD,MASO;AACLD,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B,IAA1B;AAAgC;;AAChC,YAAIgC,CAAC,GAAG,IAAR,EAAc;AACZD,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B,IAA1B;AAAgC;;AAChC+B,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B6B,KAAK,CAACG,CAAD,CAA/B;AACD,SAHD,MAGO;AACLD,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B6B,KAAK,CAACG,CAAC,IAAI,CAAL,GAAS,GAAV,CAA/B;AACAD,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B6B,KAAK,CAACG,CAAC,GAAG,GAAL,CAA/B;AACD;AACF;AACF;;AAED,WAAO7C,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAP;AACD,GAlLY;;AAoLb;;;;;;;AAOAG,EAAAA,SAAS,EAAE,UAASC,MAAT,EAAiB;AAC1B,QAAIJ,OAAO,GAAG,EAAd;AACA,QAAInB,CAAC,GAAG,CAAR;AACA,QAAIH,GAAG,GAAG0B,MAAM,IAAIA,MAAM,CAACnC,MAA3B;AACA,QAAIoC,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGD,MAAM,CAACE,UAAP,CAAkBzB,CAAC,EAAnB,CAAJ;;AACA,UAAIwB,CAAC,KAAK;AAAK;AAAf,QAAsB;AACpBL,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BsC,QAAQ,CAChCH,MAAM,CAACI,MAAP,CAAc3B,CAAC,EAAf,IAAqBuB,MAAM,CAACI,MAAP,CAAc3B,CAAC,EAAf,CADW,EACS,EADT,CAAlC;AAED,SAHD,MAGO;AACLmB,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;AACF;;AAED,WAAOL,OAAP;AACD,GA5MY;;AA8Mb;;;;;;AAMAS,EAAAA,YAAY,EAAE,UAAS1C,IAAT,EAAe;AAC3B,QAAIX,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBA,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AACD,WAAOX,IAAI,CAACsD,YAAL,CAAkB3C,IAAlB,CAAP;AACD,GAzNY;;AA2Nb;;;;;;AAMA4C,EAAAA,YAAY,EAAE,UAASP,MAAT,EAAiB;AAC7B,WAAOhD,IAAI,CAACwD,YAAL,CAAkBR,MAAlB,CAAP;AACD,GAnOY;;AAqOb;;;;;;AAMAS,EAAAA,YAAY,EAAEzD,IAAI,CAACsC,iBA3ON;;AA6Ob;;;;;;AAMAK,EAAAA,YAAY,EAAE3C,IAAI,CAAC2C,YAnPN;;AAqPb;;;;;;;;;;;;;AAaAe,EAAAA,aAAa,EAAE,UAAS/C,IAAT,EAAe;AAC5B,QAAIgD,QAAQ,GAAG,KAAf;;AACA,QAAI3D,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBgD,MAAAA,QAAQ,GAAG,IAAX;AACAhD,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AACA,UAAIwB,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AAC9BA,QAAAA,CAAC,IAAI,MAAL;AACD;;AACDL,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOU,QAAQ,GAAG3D,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAH,GAAqCA,OAApD;AACD,GAvRY;;AAyRb;;;;;;;;;;;;;AAaAgB,EAAAA,aAAa,EAAE,UAASjD,IAAT,EAAe;AAC5B,QAAIgD,QAAQ,GAAG,KAAf;;AACA,QAAI3D,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBgD,MAAAA,QAAQ,GAAG,IAAX;AACAhD,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AACA,UAAIwB,CAAC,IAAI,IAAL,IAAaA,CAAC,IAAI,IAAtB,EAA4B;AAC1BA,QAAAA,CAAC,IAAI,MAAL;AACD;;AACDL,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOU,QAAQ,GAAG3D,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAH,GAAqCA,OAApD;AACD,GA3TY;;AA6Tb;;;;;;;;;;;;AAYAiB,EAAAA,cAAc,EAAE,UAASlD,IAAT,EAAe;AAC7B,QAAIgD,QAAQ,GAAG,KAAf;;AACA,QAAI3D,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBgD,MAAAA,QAAQ,GAAG,IAAX;AACAhD,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AACA,UAAIwB,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AAC9BA,QAAAA,CAAC,IAAI,MAAL,CAD8B,CAEhC;AACC,OAHD,MAGO,IAAIA,CAAC,KAAK,MAAV,EAAkB;AACvBL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B,MAA1B;AACAoC,QAAAA,CAAC,GAAG,MAAJ,CAFuB,CAGzB;AACC,OAJM,MAIA,IAAIA,CAAC,KAAK,MAAV,EAAkB;AACvBL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B,MAA1B;AACAoC,QAAAA,CAAC,GAAG,MAAJ;AACD;;AACDL,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOU,QAAQ,GAAG3D,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAH,GAAqCA,OAApD;AACD,GAtWY;;AAwWb;;;;;;;;;;;;AAYAkB,EAAAA,cAAc,EAAE,UAASnD,IAAT,EAAe;AAC7B,QAAIgD,QAAQ,GAAG,KAAf;;AACA,QAAI3D,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBgD,MAAAA,QAAQ,GAAG,IAAX;AACAhD,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AACA,UAAIwB,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AAC9B,YAAI,CAACA,CAAC,KAAK,MAAN,IAAgB;AAChBA,QAAAA,CAAC,KAAK,MADP,KACkB;AAClBxB,QAAAA,CAAC,GAAGH,GAFJ,IAEWX,IAAI,CAACc,CAAD,CAAJ,KAAY,MAF3B,EAEmC;AACjCwB,UAAAA,CAAC,GAAGA,CAAC,KAAK,MAAN,GAAe,MAAf,GAAwB,MAA5B;AACAxB,UAAAA,CAAC;AACF,SALD,MAKO;AACLwB,UAAAA,CAAC,IAAI,MAAL;AACD;AACF;;AACDL,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOU,QAAQ,GAAG3D,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAH,GAAqCA,OAApD;AACD,GAhZY;;AAkZb;;;;;;;;;;;;AAYAmB,EAAAA,aAAa,EAAE,UAASpD,IAAT,EAAe;AAC5B,QAAIgD,QAAQ,GAAG,KAAf;;AACA,QAAI3D,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBgD,MAAAA,QAAQ,GAAG,IAAX;AACAhD,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ,EAAOe,CAAP,EAAUC,CAAV;;AAEA,WAAOxC,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AAEA,UAAIwB,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AAC9BgB,QAAAA,CAAC,GAAG9D,aAAa,CAAC+D,aAAd,CAA4BjB,CAA5B,CAAJ;;AACA,YAAIgB,CAAC,KAAK,KAAK,CAAf,EAAkB;AAChBrB,UAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoD,CAA1B;AACA;AACD;AACF,OATa,CAWd;;;AACA,UAAIhB,CAAC,KAAK,MAAN,IAAgBA,CAAC,KAAK,MAAtB,IAAgCA,CAAC,KAAK,MAA1C,EAAkD;AAChDL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BV,aAAa,CAACgE,eAAd,CAA8BlB,CAA9B,CAA1B;AACAL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B,MAA1B,CAFgD,CAGhD;AACD,OAJD,MAIO,IAAIoC,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AACrCL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BV,aAAa,CAAC+D,aAAd,CAA4BjB,CAAC,GAAG,CAAhC,CAA1B;AACAL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0B,MAA1B,CAFqC,CAGrC;AACD,OAJM,MAIA,IAAIoC,CAAC,IAAI,MAAL,IAAeA,CAAC,IAAI,MAAxB,EAAgC;AACrCe,QAAAA,CAAC,GAAGf,CAAC,GAAG,CAAR;AACAL,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BV,aAAa,CAAC+D,aAAd,CAA4BjB,CAAC,GAAGe,CAAhC,CAA1B;AACApB,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BV,aAAa,CAACiE,aAAd,CAA4BJ,CAAC,GAAG,CAAhC,CAA1B;AACD,OAJM,MAIA;AACLpB,QAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;AACF;;AAED,WAAOU,QAAQ,GAAG3D,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAH,GAAqCA,OAApD;AACD,GAxcY;;AA0cb;;;;;;;;;;;;AAYAyB,EAAAA,aAAa,EAAE,UAAS1D,IAAT,EAAe;AAC5B,QAAIgD,QAAQ,GAAG,KAAf;;AACA,QAAI3D,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvBgD,MAAAA,QAAQ,GAAG,IAAX;AACAhD,MAAAA,IAAI,GAAGX,IAAI,CAACkB,cAAL,CAAoBP,IAApB,CAAP;AACD;;AAED,QAAIiC,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ,EAAOqB,IAAP,EAAaC,IAAb;;AAEA,SAAK9C,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,GAAhB,EAAqBG,CAAC,EAAtB,EAA0B;AACxBwB,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAD,CAAR,CADwB,CAExB;;AACA,UAAIwB,CAAC,GAAG,MAAJ,IAAcA,CAAC,GAAG,MAAtB,EAA8B;AAC5BqB,QAAAA,IAAI,GAAGnE,aAAa,CAACqE,aAAd,CAA4BvB,CAAC,GAAG,MAAhC,CAAP;;AACA,YAAIxB,CAAC,GAAG,CAAJ,GAAQH,GAAZ,EAAiB;AACfiD,UAAAA,IAAI,GAAG5D,IAAI,CAACc,CAAC,GAAG,CAAL,CAAX,CADe,CAEf;;AACA,cAAI8C,IAAI,KAAK,MAAT,IAAmBtB,CAAC,KAAK,MAA7B,EAAqC;AACnCqB,YAAAA,IAAI,GAAG,MAAP;AACA7C,YAAAA,CAAC,GAFkC,CAGrC;AACC,WAJD,MAIO,IAAI8C,IAAI,KAAK,MAAT,IAAmBtB,CAAC,KAAK,MAA7B,EAAqC;AAC1CqB,YAAAA,IAAI,GAAG,MAAP;AACA7C,YAAAA,CAAC,GAFyC,CAG5C;AACC,WAJM,MAIA,IAAI8C,IAAI,KAAK,MAAT,IAAmBtB,CAAC,KAAK,MAA7B,EAAqC;AAC1CqB,YAAAA,IAAI,GAAG,MAAP;AACA7C,YAAAA,CAAC,GAFyC,CAG1C;AACD,WAJM,MAIA,IAAI8C,IAAI,KAAK,MAAT,KACEtB,CAAC,GAAG,MAAJ,IAAcA,CAAC,GAAG,MAAnB,IACCA,CAAC,GAAG,MAAJ,IAAcA,CAAC,GAAG,MAFpB,CAAJ,EAEkC;AACvCqB,YAAAA,IAAI;AACJ7C,YAAAA,CAAC,GAFsC,CAGvC;AACD,WANM,MAMA,IAAI8C,IAAI,KAAK,MAAT,IACCtB,CAAC,GAAG,MAAJ,IAAcA,CAAC,GAAG,MADvB,EACgC;AACrCqB,YAAAA,IAAI,IAAI,CAAR;AACA7C,YAAAA,CAAC;AACF;AACF;;AACDwB,QAAAA,CAAC,GAAGqB,IAAJ;AACD;;AACD1B,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOU,QAAQ,GAAG3D,IAAI,CAACsC,iBAAL,CAAuBM,OAAvB,CAAH,GAAqCA,OAApD;AACD,GAxgBY;;AA0gBb;;;;;;;;AAQA6B,EAAAA,cAAc,EAAE,UAAS9D,IAAT,EAAe;AAC7B,QAAIX,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvB,aAAOA,IAAI,CAAC+D,OAAL,CAAa,SAAb,EAAwB,GAAxB,CAAP;AACD;;AAED,QAAI9B,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AACA,UAAIwB,CAAC,KAAK,MAAV,EAAkB;AAChBA,QAAAA,CAAC,GAAG,IAAJ;AACD;;AACDL,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOL,OAAP;AACD,GAriBY;;AAuiBb;;;;;;;;AAQA+B,EAAAA,cAAc,EAAE,UAAShE,IAAT,EAAe;AAC7B,QAAIX,IAAI,CAACiB,QAAL,CAAcN,IAAd,CAAJ,EAAyB;AACvB,aAAOA,IAAI,CAAC+D,OAAL,CAAa,SAAb,EAAwB,QAAxB,CAAP;AACD;;AAED,QAAI9B,OAAO,GAAG,EAAd;AACA,QAAItB,GAAG,GAAGX,IAAI,IAAIA,IAAI,CAACE,MAAvB;AACA,QAAIY,CAAC,GAAG,CAAR;AACA,QAAIwB,CAAJ;;AAEA,WAAOxB,CAAC,GAAGH,GAAX,EAAgB;AACd2B,MAAAA,CAAC,GAAGtC,IAAI,CAACc,CAAC,EAAF,CAAR;;AACA,UAAIwB,CAAC,KAAK,IAAV,EAAgB;AACdA,QAAAA,CAAC,GAAG,MAAJ;AACD;;AACDL,MAAAA,OAAO,CAACA,OAAO,CAAC/B,MAAT,CAAP,GAA0BoC,CAA1B;AACD;;AAED,WAAOL,OAAP;AACD;AAlkBY,CAAf;AAqkBAgC,MAAM,CAACC,OAAP,GAAiBtE,QAAjB","sourcesContent":["var config = require('./config');\nvar util = require('./util');\nvar EncodingDetect = require('./encoding-detect');\nvar EncodingConvert = require('./encoding-convert');\nvar KanaCaseTable = require('./kana-case-table');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar Encoding = {\n\n  /**\n   * Encoding orders\n   */\n  orders: config.EncodingOrders,\n\n  /**\n   * Detects character encoding\n   *\n   * If encodings is \"AUTO\", or the encoding-list as an array, or\n   *   comma separated list string it will be detected automatically\n   *\n   * @param {Array.<number>|TypedArray|string} data The data being detected\n   * @param {(Object|string|Array.<string>)=} [encodings] The encoding-list of\n   *   character encoding\n   * @return {string|boolean} The detected character encoding, or false\n   */\n  detect: function(data, encodings) {\n    if (data == null || data.length === 0) {\n      return false;\n    }\n\n    if (util.isObject(encodings) && !util.isArray(encodings)) {\n      encodings = encodings.encoding;\n    }\n\n    if (util.isString(data)) {\n      data = util.stringToBuffer(data);\n    }\n\n    if (encodings == null) {\n      encodings = Encoding.orders;\n    } else {\n      if (util.isString(encodings)) {\n        encodings = encodings.toUpperCase();\n        if (encodings === 'AUTO') {\n          encodings = Encoding.orders;\n        } else if (~encodings.indexOf(',')) {\n          encodings = encodings.split(/\\s*,\\s*/);\n        } else {\n          encodings = [encodings];\n        }\n      }\n    }\n\n    var len = encodings.length;\n    var e, encoding, method;\n    for (var i = 0; i < len; i++) {\n      e = encodings[i];\n      encoding = config.assignEncodingName(e);\n      if (!encoding) {\n        continue;\n      }\n\n      method = 'is' + encoding;\n      if (!hasOwnProperty.call(EncodingDetect, method)) {\n        throw new Error('Undefined encoding: ' + e);\n      }\n\n      if (EncodingDetect[method](data)) {\n        return encoding;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Convert character encoding\n   *\n   * If `from` is \"AUTO\", or the encoding-list as an array, or\n   *   comma separated list string it will be detected automatically\n   *\n   * @param {Array.<number>|TypedArray|string} data The data being converted\n   * @param {(string|Object)} to The name of encoding to\n   * @param {(string|Array.<string>)=} [from] The encoding-list of\n   *   character encoding\n   * @return {Array|TypedArray|string} The converted data\n   */\n  convert: function(data, to, from) {\n    var result;\n    var type;\n    var options = {};\n\n    if (util.isObject(to)) {\n      options = to;\n      from = options.from;\n      to = options.to;\n      if (options.type) {\n        type = options.type;\n      }\n    }\n\n    if (util.isString(data)) {\n      type = type || 'string';\n      data = util.stringToBuffer(data);\n    } else if (data == null || data.length === 0) {\n      data = [];\n    }\n\n    var encodingFrom;\n    if (from != null && util.isString(from) &&\n        from.toUpperCase() !== 'AUTO' && !~from.indexOf(',')) {\n      encodingFrom = config.assignEncodingName(from);\n    } else {\n      encodingFrom = Encoding.detect(data);\n    }\n\n    var encodingTo = config.assignEncodingName(to);\n    var method = encodingFrom + 'To' + encodingTo;\n\n    if (hasOwnProperty.call(EncodingConvert, method)) {\n      result = EncodingConvert[method](data, options);\n    } else {\n      // Returns the raw data if the method is undefined.\n      result = data;\n    }\n\n    switch (('' + type).toLowerCase()) {\n      case 'string':\n        return util.codeToString_fast(result);\n      case 'arraybuffer':\n        return util.codeToBuffer(result);\n      case 'array':\n        /* falls through */\n      default:\n        return util.bufferToCode(result);\n    }\n  },\n\n  /**\n   * Encode a character code array to URL string like encodeURIComponent\n   *\n   * @param {Array.<number>|TypedArray} data The data being encoded\n   * @return {string} The percent encoded string\n   */\n  urlEncode: function(data) {\n    if (util.isString(data)) {\n      data = util.stringToBuffer(data);\n    }\n\n    var alpha = util.stringToCode('0123456789ABCDEF');\n    var results = [];\n    var i = 0;\n    var len = data && data.length;\n    var b;\n\n    for (; i < len; i++) {\n      b = data[i];\n\n      //FIXME: JavaScript UTF-16 encoding\n      if (b > 0xFF) {\n        return encodeURIComponent(util.codeToString_fast(data));\n      }\n\n      if ((b >= 0x61 /*a*/ && b <= 0x7A /*z*/) ||\n          (b >= 0x41 /*A*/ && b <= 0x5A /*Z*/) ||\n          (b >= 0x30 /*0*/ && b <= 0x39 /*9*/) ||\n          b === 0x21 /*!*/ ||\n          (b >= 0x27 /*'*/ && b <= 0x2A /***/) ||\n          b === 0x2D /*-*/ || b === 0x2E /*.*/ ||\n          b === 0x5F /*_*/ || b === 0x7E /*~*/\n      ) {\n        results[results.length] = b;\n      } else {\n        results[results.length] = 0x25; /*%*/\n        if (b < 0x10) {\n          results[results.length] = 0x30; /*0*/\n          results[results.length] = alpha[b];\n        } else {\n          results[results.length] = alpha[b >> 4 & 0xF];\n          results[results.length] = alpha[b & 0xF];\n        }\n      }\n    }\n\n    return util.codeToString_fast(results);\n  },\n\n  /**\n   * Decode a percent encoded string to\n   *  character code array like decodeURIComponent\n   *\n   * @param {string} string The data being decoded\n   * @return {Array.<number>} The decoded array\n   */\n  urlDecode: function(string) {\n    var results = [];\n    var i = 0;\n    var len = string && string.length;\n    var c;\n\n    while (i < len) {\n      c = string.charCodeAt(i++);\n      if (c === 0x25 /*%*/) {\n        results[results.length] = parseInt(\n          string.charAt(i++) + string.charAt(i++), 16);\n      } else {\n        results[results.length] = c;\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Encode a character code array to Base64 encoded string\n   *\n   * @param {Array.<number>|TypedArray} data The data being encoded\n   * @return {string} The Base64 encoded string\n   */\n  base64Encode: function(data) {\n    if (util.isString(data)) {\n      data = util.stringToBuffer(data);\n    }\n    return util.base64encode(data);\n  },\n\n  /**\n   * Decode a Base64 encoded string to character code array\n   *\n   * @param {string} string The data being decoded\n   * @return {Array.<number>} The decoded array\n   */\n  base64Decode: function(string) {\n    return util.base64decode(string);\n  },\n\n  /**\n   * Joins a character code array to string\n   *\n   * @param {Array.<number>|TypedArray} data The data being joined\n   * @return {String} The joined string\n   */\n  codeToString: util.codeToString_fast,\n\n  /**\n   * Splits string to an array of character codes\n   *\n   * @param {string} string The input string\n   * @return {Array.<number>} The character code array\n   */\n  stringToCode: util.stringToCode,\n\n  /**\n   * 全角英数記号文字を半角英数記号文字に変換\n   *\n   * Convert the ascii symbols and alphanumeric characters to\n   *   the zenkaku symbols and alphanumeric characters\n   *\n   * @example\n   *   console.log(Encoding.toHankakuCase('Ｈｅｌｌｏ Ｗｏｒｌｄ！ １２３４５'));\n   *   // 'Hello World! 12345'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHankakuCase: function(data) {\n    var asString = false;\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n      if (c >= 0xFF01 && c <= 0xFF5E) {\n        c -= 0xFEE0;\n      }\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 半角英数記号文字を全角英数記号文字に変換\n   *\n   * Convert to the zenkaku symbols and alphanumeric characters\n   *  from the ascii symbols and alphanumeric characters\n   *\n   * @example\n   *   console.log(Encoding.toZenkakuCase('Hello World! 12345'));\n   *   // 'Ｈｅｌｌｏ Ｗｏｒｌｄ！ １２３４５'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toZenkakuCase: function(data) {\n    var asString = false;\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n      if (c >= 0x21 && c <= 0x7E) {\n        c += 0xFEE0;\n      }\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角カタカナを全角ひらがなに変換\n   *\n   * Convert to the zenkaku hiragana from the zenkaku katakana\n   *\n   * @example\n   *   console.log(Encoding.toHiraganaCase('ボポヴァアィイゥウェエォオ'));\n   *   // 'ぼぽう゛ぁあぃいぅうぇえぉお'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHiraganaCase: function(data) {\n    var asString = false;\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n      if (c >= 0x30A1 && c <= 0x30F6) {\n        c -= 0x0060;\n      // 「ワ゛」 => 「わ」 + 「゛」\n      } else if (c === 0x30F7) {\n        results[results.length] = 0x308F;\n        c = 0x309B;\n      // 「ヲ゛」 => 「を」 + 「゛」\n      } else if (c === 0x30FA) {\n        results[results.length] = 0x3092;\n        c = 0x309B;\n      }\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角ひらがなを全角カタカナに変換\n   *\n   * Convert to the zenkaku katakana from the zenkaku hiragana\n   *\n   * @example\n   *   console.log(Encoding.toKatakanaCase('ぼぽう゛ぁあぃいぅうぇえぉお'));\n   *   // 'ボポヴァアィイゥウェエォオ'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toKatakanaCase: function(data) {\n    var asString = false;\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n      if (c >= 0x3041 && c <= 0x3096) {\n        if ((c === 0x308F || // 「わ」 + 「゛」 => 「ワ゛」\n             c === 0x3092) && // 「を」 + 「゛」 => 「ヲ゛」\n            i < len && data[i] === 0x309B) {\n          c = c === 0x308F ? 0x30F7 : 0x30FA;\n          i++;\n        } else {\n          c += 0x0060;\n        }\n      }\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角カタカナを半角ｶﾀｶﾅに変換\n   *\n   * Convert to the hankaku katakana from the zenkaku katakana\n   *\n   * @example\n   *   console.log(Encoding.toHankanaCase('ボポヴァアィイゥウェエォオ'));\n   *   // 'ﾎﾞﾎﾟｳﾞｧｱｨｲｩｳｪｴｫｵ'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHankanaCase: function(data) {\n    var asString = false;\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c, d, t;\n\n    while (i < len) {\n      c = data[i++];\n\n      if (c >= 0x3001 && c <= 0x30FC) {\n        t = KanaCaseTable.HANKANA_TABLE[c];\n        if (t !== void 0) {\n          results[results.length] = t;\n          continue;\n        }\n      }\n\n      // 「ヴ」, 「ワ」+「゛」, 「ヲ」+「゛」\n      if (c === 0x30F4 || c === 0x30F7 || c === 0x30FA) {\n        results[results.length] = KanaCaseTable.HANKANA_SONANTS[c];\n        results[results.length] = 0xFF9E;\n        // 「カ」 - 「ド」\n      } else if (c >= 0x30AB && c <= 0x30C9) {\n        results[results.length] = KanaCaseTable.HANKANA_TABLE[c - 1];\n        results[results.length] = 0xFF9E;\n        // 「ハ」 - 「ポ」\n      } else if (c >= 0x30CF && c <= 0x30DD) {\n        d = c % 3;\n        results[results.length] = KanaCaseTable.HANKANA_TABLE[c - d];\n        results[results.length] = KanaCaseTable.HANKANA_MARKS[d - 1];\n      } else {\n        results[results.length] = c;\n      }\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 半角ｶﾀｶﾅを全角カタカナに変換 (濁音含む)\n   *\n   * Convert to the zenkaku katakana from the hankaku katakana\n   *\n   * @example\n   *   console.log(Encoding.toZenkanaCase('ﾎﾞﾎﾟｳﾞｧｱｨｲｩｳｪｴｫｵ'));\n   *   // 'ボポヴァアィイゥウェエォオ'\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toZenkanaCase: function(data) {\n    var asString = false;\n    if (util.isString(data)) {\n      asString = true;\n      data = util.stringToBuffer(data);\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c, code, next;\n\n    for (i = 0; i < len; i++) {\n      c = data[i];\n      // Hankaku katakana\n      if (c > 0xFF60 && c < 0xFFA0) {\n        code = KanaCaseTable.ZENKANA_TABLE[c - 0xFF61];\n        if (i + 1 < len) {\n          next = data[i + 1];\n          // 「ﾞ」 + 「ヴ」\n          if (next === 0xFF9E && c === 0xFF73) {\n            code = 0x30F4;\n            i++;\n          // 「ﾞ」 + 「ワ゛」\n          } else if (next === 0xFF9E && c === 0xFF9C) {\n            code = 0x30F7;\n            i++;\n          // 「ﾞ」 + 「ｦ゛」\n          } else if (next === 0xFF9E && c === 0xFF66) {\n            code = 0x30FA;\n            i++;\n            // 「ﾞ」 + 「カ」 - 「コ」 or 「ハ」 - 「ホ」\n          } else if (next === 0xFF9E &&\n                     ((c > 0xFF75 && c < 0xFF85) ||\n                      (c > 0xFF89 && c < 0xFF8F))) {\n            code++;\n            i++;\n            // 「ﾟ」 + 「ハ」 - 「ホ」\n          } else if (next === 0xFF9F &&\n                     (c > 0xFF89 && c < 0xFF8F)) {\n            code += 2;\n            i++;\n          }\n        }\n        c = code;\n      }\n      results[results.length] = c;\n    }\n\n    return asString ? util.codeToString_fast(results) : results;\n  },\n\n  /**\n   * 全角スペースを半角スペースに変換\n   *\n   * Convert the em space(U+3000) to the single space(U+0020)\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toHankakuSpace: function(data) {\n    if (util.isString(data)) {\n      return data.replace(/\\u3000/g, ' ');\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n      if (c === 0x3000) {\n        c = 0x20;\n      }\n      results[results.length] = c;\n    }\n\n    return results;\n  },\n\n  /**\n   * 半角スペースを全角スペースに変換\n   *\n   * Convert the single space(U+0020) to the em space(U+3000)\n   *\n   * @param {Array.<number>|TypedArray|string} data The input unicode data\n   * @return {Array.<number>|string} The conveted data\n   */\n  toZenkakuSpace: function(data) {\n    if (util.isString(data)) {\n      return data.replace(/\\u0020/g, '\\u3000');\n    }\n\n    var results = [];\n    var len = data && data.length;\n    var i = 0;\n    var c;\n\n    while (i < len) {\n      c = data[i++];\n      if (c === 0x20) {\n        c = 0x3000;\n      }\n      results[results.length] = c;\n    }\n\n    return results;\n  }\n};\n\nmodule.exports = Encoding;\n"]},"metadata":{},"sourceType":"script"}